import java.io.*;
import java.util.*;
import java.util.concurrent.locks.*;

public class Admin {
    final List<Student> studentList = new ArrayList<>();
    final Set<Integer> studentIdSet = new HashSet<>();
    final Map<Integer, List<Subject>> studentsSubjects = new HashMap<>();
    private final ReentrantLock studentLock = new ReentrantLock();

    // Add student
    public void addStudent(Student student) throws DuplicateStudentIdException {
        studentLock.lock();
        try {
            if (studentIdSet.contains(student.getStudentId())) {
                throw new DuplicateStudentIdException("Student with ID " + student.getStudentId() + " already exists.");
            }
            studentList.add(student);
            studentIdSet.add(student.getStudentId());
            studentsSubjects.put(student.getStudentId(), new ArrayList<>());
            System.out.println("Student added: " + student.getStudentId());
        } finally {
            studentLock.unlock();
        }
    }

    // Remove student
    public void removeStudent(int studentId) throws StudentNotFoundException {
        studentLock.lock();
        try {
            Student studentToRemove = null;
            for (Student student : studentList) {
                if (student.getStudentId() == studentId) {
                    studentToRemove = student;
                    break;
                }
            }
            if (studentToRemove == null) {
                throw new StudentNotFoundException("Student not found with ID: " + studentId);
            }
            studentList.remove(studentToRemove);
            studentIdSet.remove(studentId);
            studentsSubjects.remove(studentId);
            System.out.println("Student removed: " + studentId);
        } finally {
            studentLock.unlock();
        }
    }

    // Update student
    public void updateStudent(Student updatedStudent) throws StudentNotFoundException {
        studentLock.lock();
        try {
            for (int i = 0; i < studentList.size(); i++) {
                if (studentList.get(i).getStudentId() == updatedStudent.getStudentId()) {
                    studentList.set(i, updatedStudent);
                    System.out.println("Student updated: " + updatedStudent.getStudentId());
                    return;
                }
            }
            throw new StudentNotFoundException("Student not found: " + updatedStudent.getStudentId());
        } finally {
            studentLock.unlock();
        }
    }

    // Display students
    public void displayStudents() {
        studentList.forEach(student -> System.out.println(student.toString()));
    }

    // Add subject to student
    public void addSubjectToStudent(int studentId, Subject subject) throws StudentNotFoundException {
        studentLock.lock();
        try {
            List<Subject> subjects = studentsSubjects.get(studentId);
            if (subjects == null) {
                throw new StudentNotFoundException("Student not found with ID: " + studentId);
            }
            if (!subjects.contains(subject)) {
                subjects.add(subject);
                System.out.println("Subject added to student: " + studentId);
            } else {
                System.out.println("Subject already added to student: " + studentId);
            }
        } finally {
            studentLock.unlock();
        }
    }

    // Write students to file
    public void writeStudentsToFile(String filename) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (Student student : studentList) {
                writer.write(student.toString());
                writer.newLine();
            }
        }
    }

    // Read students from file
    public void readStudentsFromFile(String filename) throws IOException, InvalidFileFormatException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length != 7) {
                    throw new InvalidFileFormatException("Invalid student data format.");
                }
                Student student = new Student(
                        Integer.parseInt(data[0]),
                        data[1],
                        data[2],
                        LocalDate.parse(data[3]),
                        data[4],
                        data[5],
                        data[6]
                );
                try {
                    addStudent(student);
                } catch (DuplicateStudentIdException e) {
                    System.out.println("Skipping duplicate student ID: " + student.getStudentId());
                }
            }
        }
    }
}

// Exception classes
class DuplicateStudentIdException extends Exception {
    public DuplicateStudentIdException(String message) {
        super(message);
    }
}

class StudentNotFoundException extends Exception {
    public StudentNotFoundException(String message) {
        super(message);
    }
}

class InvalidFileFormatException extends Exception {
    public InvalidFileFormatException(String message) {
        super(message);
    }
}

// Student class
class Student {
    private int studentId;
    private String firstName;
    private String lastName;
    private LocalDate dateOfBirth;
    private String phoneNumber;
    private String address;
    private String gender;

    public Student(int studentId, String firstName, String lastName, LocalDate dateOfBirth, String phoneNumber, String address, String gender) {
        this.studentId = studentId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.dateOfBirth = dateOfBirth;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.gender = gender;
    }

    public int getStudentId() {
        return studentId;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public LocalDate getDateOfBirth() {
        return dateOfBirth;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getAddress() {
        return address;
    }

    public String getGender() {
        return gender;
    }

    @Override
    public String toString() {
        return studentId + "," + firstName + "," + lastName + "," + dateOfBirth + "," + phoneNumber + "," + address + "," + gender;
    }
}

// Subject class
class Subject {
    private int subjectId;
    private String subjectName;

    public Subject(int subjectId, String subjectName) {
        this.subjectId = subjectId;
        this.subjectName = subjectName;
    }

    public int getSubjectId() {
        return subjectId;
    }

    public String getSubjectName() {
        return subjectName;
    }
}

// Main Class
public class Main {
    public static void main(String[] args) throws IOException {
        Admin admin = new Admin();

        // Add some students
        Student student1 = new Student(1, "John", "Doe", LocalDate.of(2000, 1, 1), "1234567890", "123 Elm St", "Male");
        admin.addStudent(student1);

        Student student2 = new Student(2, "Jane", "Smith", LocalDate.of(2001, 2, 2), "0987654321", "456 Oak St", "Female");
        admin.addStudent(student2);

        // Display students
        admin.displayStudents();

        // Write students to file
        admin.writeStudentsToFile("students.txt");

        // Read students from file
        admin.readStudentsFromFile("students.txt");

        // Add subject to student
        Subject subject = new Subject(1, "Math");
        admin.addSubjectToStudent(1, subject);
    }
}


synchronized (studentList) {
            boolean studentFound = false;

            for (Student student : studentList) {
                if (student.getStudentId() == updatedStudent.getStudentId()) {
                    // Update student details
                    student.setStudentName(updatedStudent.getStudentName());
                    student.setDateOfBirth(updatedStudent.getDateOfBirth());
                    student.setPhoneNumber(updatedStudent.getPhoneNumber());
                    System.out.println("Student updated: " + student.getStudentId());
                    studentFound = true;
                    break;
                }
            }

            if (!studentFound) {
                System.out.println("Student not found: " + updatedStudent.getStudentId());
            }
        }
